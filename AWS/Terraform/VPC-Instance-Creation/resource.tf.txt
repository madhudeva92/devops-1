resource "aws_vpc" "My_vpc" {
  cidr_block = var.vpc_cidr
  enable_dns_hostnames = true
  tags = {
    Name = "My_vpc"
  }
}

resource "aws_internet_gateway" "My-IGW" {
  vpc_id = aws_vpc.My_vpc.id
  tags = {
    Name = "My-IGW"
  }
}

resource "aws_subnet" "My-pulic-Subnet" {
  count             = length(var.public_subnets_cidr)
  vpc_id            = aws_vpc.My_vpc.id
  cidr_block        = element(var.public_subnets_cidr, count.index)
  availability_zone = element(var.avilability_zone_subnet, count.index)
  tags = {
    Name = "My-pulic-Subnet-${count.index + 1}"
  }
}
resource "aws_subnet" "My-private-subnet" {
  vpc_id                  = aws_vpc.My_vpc.id
  count                   = length(var.private_subnets_cidr)
  cidr_block              = element(var.private_subnets_cidr, count.index)
  availability_zone       = element(var.avilability_zone_subnet, count.index)
  map_public_ip_on_launch = false
  tags = {
    Name = "My-private-subnet-${count.index + 1}"
  }
}
resource "aws_eip" "my-nat-eip" {
  vpc        = true
  depends_on = [aws_internet_gateway.My-IGW]
  tags = {
    Name = "my-nat-eip"
  }
}
resource "aws_nat_gateway" "my-nat" {
  allocation_id = aws_eip.my-nat-eip.id
  subnet_id     = element(aws_subnet.My-private-subnet.*.id, 0)
  depends_on    = [aws_internet_gateway.My-IGW]
  tags = {
    Name = "my-nat"
  }
}
resource "aws_route_table" "My-private-route-table" {
  vpc_id = aws_vpc.My_vpc.id
  tags = {
    Name = "My-private-route-table"
  }
}
resource "aws_route" "My-private_nat_gateway" {
  route_table_id         = aws_route_table.My-private-route-table.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.my-nat.id
}
resource "aws_route_table_association" "My-private-Route-table-association" {
  count          = length(var.private_subnets_cidr)
  subnet_id      = element(aws_subnet.My-private-subnet.*.id, count.index)
  route_table_id = aws_route_table.My-private-route-table.id
}

resource "aws_route_table" "My-pubilc-route-table" {
  vpc_id = aws_vpc.My_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.My-IGW.id
  }
  tags = {
    Name = "My-pubilc-route-table"
  }
}

resource "aws_route_table_association" "My-pubilc-Route-table-association" {
  count          = length(var.public_subnets_cidr)
  subnet_id      = element(aws_subnet.My-pulic-Subnet.*.id, count.index)
  route_table_id = aws_route_table.My-pubilc-route-table.id

}
resource "aws_security_group" "My-Security-Group" {
  name        = "My-Security-Group"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_vpc.My_vpc.id

  ingress {
    description = "TLS from VPC"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "My-Security-Group"
  }
}

resource "aws_key_pair" "My-Key-Pair" {
  key_name   = "MyKeyFinal"
  public_key = file("pubkey.txt")
}

resource "aws_instance" "httpd" {
  count                  = var.instance_count
  ami                    = lookup(var.ami_types, var.region_name)
  instance_type          = var.instance_type
  key_name               = "newkey"
  monitoring             = var.monitoring
  security_groups        = [aws_security_group.My-Security-Group.id]
  subnet_id              = element(aws_subnet.My-pulic-Subnet.*.id, count.index)
  user_data              = file("software_install.sh.txt")
  tags                   = var.tags
  associate_public_ip_address = true
 }
resource "aws_s3_bucket" "my-bucket-for-test1" {
  bucket = var.bucket
  acl    = var.acl
  force_destroy = var.force_destroy
  versioning {
            enabled = true
        }

  tags = {
    Name        = "my-bucket-for-test1"

  }
}
